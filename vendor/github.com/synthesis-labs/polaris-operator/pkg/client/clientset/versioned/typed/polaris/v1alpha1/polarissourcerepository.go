/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by client-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/synthesis-labs/polaris-operator/pkg/apis/polaris/v1alpha1"
	scheme "github.com/synthesis-labs/polaris-operator/pkg/client/clientset/versioned/scheme"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	rest "k8s.io/client-go/rest"
)

// PolarisSourceRepositoriesGetter has a method to return a PolarisSourceRepositoryInterface.
// A group's client should implement this interface.
type PolarisSourceRepositoriesGetter interface {
	PolarisSourceRepositories(namespace string) PolarisSourceRepositoryInterface
}

// PolarisSourceRepositoryInterface has methods to work with PolarisSourceRepository resources.
type PolarisSourceRepositoryInterface interface {
	Create(*v1alpha1.PolarisSourceRepository) (*v1alpha1.PolarisSourceRepository, error)
	Update(*v1alpha1.PolarisSourceRepository) (*v1alpha1.PolarisSourceRepository, error)
	UpdateStatus(*v1alpha1.PolarisSourceRepository) (*v1alpha1.PolarisSourceRepository, error)
	Delete(name string, options *v1.DeleteOptions) error
	DeleteCollection(options *v1.DeleteOptions, listOptions v1.ListOptions) error
	Get(name string, options v1.GetOptions) (*v1alpha1.PolarisSourceRepository, error)
	List(opts v1.ListOptions) (*v1alpha1.PolarisSourceRepositoryList, error)
	Watch(opts v1.ListOptions) (watch.Interface, error)
	Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *v1alpha1.PolarisSourceRepository, err error)
	PolarisSourceRepositoryExpansion
}

// polarisSourceRepositories implements PolarisSourceRepositoryInterface
type polarisSourceRepositories struct {
	client rest.Interface
	ns     string
}

// newPolarisSourceRepositories returns a PolarisSourceRepositories
func newPolarisSourceRepositories(c *PolarisV1alpha1Client, namespace string) *polarisSourceRepositories {
	return &polarisSourceRepositories{
		client: c.RESTClient(),
		ns:     namespace,
	}
}

// Get takes name of the polarisSourceRepository, and returns the corresponding polarisSourceRepository object, and an error if there is any.
func (c *polarisSourceRepositories) Get(name string, options v1.GetOptions) (result *v1alpha1.PolarisSourceRepository, err error) {
	result = &v1alpha1.PolarisSourceRepository{}
	err = c.client.Get().
		Namespace(c.ns).
		Resource("polarissourcerepositories").
		Name(name).
		VersionedParams(&options, scheme.ParameterCodec).
		Do().
		Into(result)
	return
}

// List takes label and field selectors, and returns the list of PolarisSourceRepositories that match those selectors.
func (c *polarisSourceRepositories) List(opts v1.ListOptions) (result *v1alpha1.PolarisSourceRepositoryList, err error) {
	result = &v1alpha1.PolarisSourceRepositoryList{}
	err = c.client.Get().
		Namespace(c.ns).
		Resource("polarissourcerepositories").
		VersionedParams(&opts, scheme.ParameterCodec).
		Do().
		Into(result)
	return
}

// Watch returns a watch.Interface that watches the requested polarisSourceRepositories.
func (c *polarisSourceRepositories) Watch(opts v1.ListOptions) (watch.Interface, error) {
	opts.Watch = true
	return c.client.Get().
		Namespace(c.ns).
		Resource("polarissourcerepositories").
		VersionedParams(&opts, scheme.ParameterCodec).
		Watch()
}

// Create takes the representation of a polarisSourceRepository and creates it.  Returns the server's representation of the polarisSourceRepository, and an error, if there is any.
func (c *polarisSourceRepositories) Create(polarisSourceRepository *v1alpha1.PolarisSourceRepository) (result *v1alpha1.PolarisSourceRepository, err error) {
	result = &v1alpha1.PolarisSourceRepository{}
	err = c.client.Post().
		Namespace(c.ns).
		Resource("polarissourcerepositories").
		Body(polarisSourceRepository).
		Do().
		Into(result)
	return
}

// Update takes the representation of a polarisSourceRepository and updates it. Returns the server's representation of the polarisSourceRepository, and an error, if there is any.
func (c *polarisSourceRepositories) Update(polarisSourceRepository *v1alpha1.PolarisSourceRepository) (result *v1alpha1.PolarisSourceRepository, err error) {
	result = &v1alpha1.PolarisSourceRepository{}
	err = c.client.Put().
		Namespace(c.ns).
		Resource("polarissourcerepositories").
		Name(polarisSourceRepository.Name).
		Body(polarisSourceRepository).
		Do().
		Into(result)
	return
}

// UpdateStatus was generated because the type contains a Status member.
// Add a +genclient:noStatus comment above the type to avoid generating UpdateStatus().

func (c *polarisSourceRepositories) UpdateStatus(polarisSourceRepository *v1alpha1.PolarisSourceRepository) (result *v1alpha1.PolarisSourceRepository, err error) {
	result = &v1alpha1.PolarisSourceRepository{}
	err = c.client.Put().
		Namespace(c.ns).
		Resource("polarissourcerepositories").
		Name(polarisSourceRepository.Name).
		SubResource("status").
		Body(polarisSourceRepository).
		Do().
		Into(result)
	return
}

// Delete takes name of the polarisSourceRepository and deletes it. Returns an error if one occurs.
func (c *polarisSourceRepositories) Delete(name string, options *v1.DeleteOptions) error {
	return c.client.Delete().
		Namespace(c.ns).
		Resource("polarissourcerepositories").
		Name(name).
		Body(options).
		Do().
		Error()
}

// DeleteCollection deletes a collection of objects.
func (c *polarisSourceRepositories) DeleteCollection(options *v1.DeleteOptions, listOptions v1.ListOptions) error {
	return c.client.Delete().
		Namespace(c.ns).
		Resource("polarissourcerepositories").
		VersionedParams(&listOptions, scheme.ParameterCodec).
		Body(options).
		Do().
		Error()
}

// Patch applies the patch and returns the patched polarisSourceRepository.
func (c *polarisSourceRepositories) Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *v1alpha1.PolarisSourceRepository, err error) {
	result = &v1alpha1.PolarisSourceRepository{}
	err = c.client.Patch(pt).
		Namespace(c.ns).
		Resource("polarissourcerepositories").
		SubResource(subresources...).
		Name(name).
		Body(data).
		Do().
		Into(result)
	return
}
